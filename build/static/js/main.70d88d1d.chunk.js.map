{"version":3,"sources":["components/CryptoTable/index.tsx","components/ConverterBlock/index.tsx","styles.ts","App.tsx","stores/converterStore.ts","stores/currenciesStore.ts","stores/index.ts","index.tsx"],"names":["CryptoTable","inject","observer","classes","currenciesStore","converterStore","items","getItems","diffObj","getDiffObj","React","useEffect","fetchCoins","setInterval","TableContainer","component","Paper","Table","stickyHeader","className","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","length","map","coin","onClick","setSelectedCoin","onClickRow","rowCurrency","key","name","hover","currencyIcon","src","imageUrl","alt","fullNmae","price","valume24hour","ConverterBlock","useState","selectedOutCoin","setSelectedOutCoin","coins","paper","cryptoInputBox","FormControl","currencyInput","TextField","fullWidth","label","currencyType","InputLabel","shrink","id","Select","value","getSelectedCoin","MenuItem","onChange","e","target","useStyles","makeStyles","theme","createStyles","root","padding","spacing","textAlign","color","palette","text","secondary","marginBottom","minWidth","width","height","borderRadius","redColumn","backgroundColor","greenColumn","cursor","App","Container","maxWidth","Grid","container","item","xs","ConverterStore","this","selectedCoin","observable","computed","action","CurrenciesStore","arr1","arr2","filter","obj","index","diffCurrencies","reduce","initObj","newObj","find","o","oldObj","itemObj","setTimeout","axios","get","then","data","Data","CoinInfo","Name","FullName","ImageUrl","RAW","USD","PRICE","toFixed","parseInt","VOLUME24HOUR","setItems","stores","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70d88d1d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nimport { TCoin, TCoinDiff } from \"../../types\";\r\nimport ConverterStore from \"../../stores/converterStore\";\r\nimport CurrenciesStore from \"../../stores/currenciesStore\";\r\n\r\ntype ICryptoTablbe = {\r\n  classes: any;\r\n  currenciesStore?: CurrenciesStore;\r\n  converterStore?: ConverterStore;\r\n};\r\n\r\nconst CryptoTable = inject(\r\n  \"currenciesStore\",\r\n  \"converterStore\"\r\n)(\r\n  observer(({ classes, currenciesStore, converterStore }: ICryptoTablbe) => {\r\n    const items: TCoin[] = currenciesStore!.getItems;\r\n    const diffObj: TCoinDiff = currenciesStore!.getDiffObj;\r\n\r\n    React.useEffect(() => {\r\n      if (currenciesStore) {\r\n        currenciesStore.fetchCoins();\r\n        setInterval(() => {\r\n          currenciesStore.fetchCoins();\r\n        }, 5000);\r\n      }\r\n    }, []);\r\n\r\n    const onClickRow = (coin: TCoin) => {\r\n      if (converterStore) {\r\n        converterStore.setSelectedCoin(coin);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Table stickyHeader className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell align=\"left\">FullName</TableCell>\r\n              <TableCell align=\"left\">Name</TableCell>\r\n              <TableCell align=\"left\">Price</TableCell>\r\n              <TableCell align=\"left\">volume24hours</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {!items.length\r\n              ? \"Загрузка\"\r\n              : items.map((coin: TCoin) => (\r\n                  <TableRow\r\n                    onClick={() => onClickRow(coin)}\r\n                    className={classes.rowCurrency}\r\n                    key={coin.name}\r\n                    hover\r\n                  >\r\n                    <TableCell>\r\n                      <img\r\n                        className={classes.currencyIcon}\r\n                        src={coin.imageUrl}\r\n                        alt=\"Coin Icon\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{coin.name}</TableCell>\r\n                    <TableCell align=\"left\">{coin.fullNmae}</TableCell>\r\n                    <TableCell\r\n                      className={\r\n                        diffObj[coin.name] &&\r\n                        classes[`${diffObj[coin.name]}Column`]\r\n                      }\r\n                      align=\"left\"\r\n                    >\r\n                      ${coin.price}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">${coin.valume24hour}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  })\r\n);\r\n\r\nexport default CryptoTable;\r\n","import React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\nimport ConverterStore from \"../../stores/converterStore\";\r\nimport CurrenciesStore from \"../../stores/currenciesStore\";\r\n\r\ntype IConverterBlock = {\r\n  classes: any;\r\n  currenciesStore?: CurrenciesStore;\r\n  converterStore?: ConverterStore;\r\n};\r\n\r\nconst ConverterBlock: React.FC<IConverterBlock> = inject(\r\n  \"currenciesStore\",\r\n  \"converterStore\"\r\n)(\r\n  observer(({ classes, currenciesStore, converterStore }) => {\r\n    const [selectedOutCoin, setSelectedOutCoin] = React.useState(\"USD\");\r\n    const coins: string[] = currenciesStore!.getItems.map((coin) => coin.name);\r\n\r\n    return (\r\n      <Paper className={classes.paper}>\r\n        <div className={classes.cryptoInputBox}>\r\n          <FormControl className={classes.currencyInput}>\r\n            <TextField fullWidth label=\"Сумма\" />\r\n          </FormControl>\r\n          <FormControl className={classes.currencyType}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n              Валюта\r\n            </InputLabel>\r\n            <Select value={converterStore?.getSelectedCoin.name || \"\"}>\r\n              {coins.map((name) => (\r\n                <MenuItem value={name}>{name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className={classes.cryptoInputBox}>\r\n          <FormControl className={classes.currencyInput}>\r\n            <TextField fullWidth label=\"Сумма\" />\r\n          </FormControl>\r\n          <FormControl className={classes.currencyType}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n              Валюта\r\n            </InputLabel>\r\n            <Select onChange={e => setSelectedOutCoin(e.target.value as string)} value={selectedOutCoin}>\r\n              <MenuItem value=\"USD\">USD</MenuItem>\r\n              {coins.map((name) => (\r\n                <MenuItem value={name}>{name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n      </Paper>\r\n    );\r\n  })\r\n);\r\n\r\nexport default ConverterBlock;\r\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      padding: theme.spacing(10),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: \"center\",\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    cryptoInputBox: {\r\n      marginBottom: \"20px\",\r\n    },\r\n    currencyInput: {\r\n      minWidth: \"calc(70% - 10px)\",\r\n    },\r\n    currencyType: {\r\n      minWidth: \"30%\",\r\n    },\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    currencyIcon: {\r\n      width: 18,\r\n      height: 18,\r\n      borderRadius: 50,\r\n    },\r\n    redColumn: {\r\n      backgroundColor: \"#ffdada\",\r\n    },\r\n    greenColumn: {\r\n      backgroundColor: \"#d8ffc4\",\r\n    },\r\n    rowCurrency: {\r\n      cursor: \"pointer\",\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import React from \"react\";\n// import axios from \"axios\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\n\n\nimport { CryptoTable, ConverterBlock } from './components';\nimport useStyles from './styles';\n\nfunction App() {\n  const classes = useStyles();\n  // let [allCoins, setAllCoins] = React.useState<TCoin[]>([]);\n\n  // React.useEffect(() => {\n  //   axios\n  //     .get(\n  //       \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD\"\n  //     )\n  //     .then(({ data }) => {\n  //       const coins: TCoin[] = data.Data.map((coin: any) => {\n  //         const obj: TCoin = {\n  //           name: coin.CoinInfo.Name,\n  //           fullNmae: coin.CoinInfo.FullName,\n  //           imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\n  //           price: coin.RAW.USD.PRICE.toFixed(3),\n  //           valume24hour: parseInt(coin.RAW.USD.VOLUME24HOUR),\n  //         };\n  //         return obj;\n  //       });\n  //       setAllCoins(coins);\n  //     });\n  // }, []);\n\n  return (\n    <Container className={classes.root} maxWidth=\"lg\">\n      <Grid container spacing={3}>\n        <Grid item xs={8}>\n          <CryptoTable classes={classes}/>\n        </Grid>\n        <Grid item xs={4}>\n          <ConverterBlock classes={classes} />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","\r\nimport { observable, computed, action } from \"mobx\";\r\nimport { TCoin } from \"../types\";\r\n\r\ntype TSelectedCoin = {\r\n  name: string;\r\n  price: number;\r\n};\r\n\r\nclass ConverterStore {\r\n  @observable private selectedCoin: TSelectedCoin = { name: \"\", price: 0 };\r\n\r\n  @computed\r\n  get getSelectedCoin() {\r\n    return this.selectedCoin;\r\n  }\r\n\r\n  @action\r\n  setSelectedCoin(coin: TCoin) {\r\n    this.selectedCoin = {\r\n      name: coin.name,\r\n      price: coin.price,\r\n    };\r\n  }\r\n}\r\n\r\nexport default ConverterStore;\r\n","import axios from \"axios\";\r\nimport { observable, computed, action } from \"mobx\";\r\nimport { TCoin, TCoinDiff } from \"../types\";\r\n\r\nimport converterStore from \"./converterStore\";\r\n\r\nclass CurrenciesStore {\r\n  @observable private items: TCoin[] = [];\r\n  @observable private diffObj: TCoinDiff = {};\r\n\r\n  @computed\r\n  get getItems() {\r\n    return this.items;\r\n  }\r\n\r\n  @computed\r\n  get getDiffObj() {\r\n    return this.diffObj;\r\n  }\r\n\r\n  @action\r\n  setItems = (items: TCoin[]): void => {\r\n    this.diffObj = this.diffCurrencies(this.items, items).reduce(\r\n      (initObj: TCoinDiff, obj: TCoin) => {\r\n        const newObj: TCoin = items.find((o) => o.name === obj.name)!;\r\n\r\n        const oldObj: TCoin = this.items.find(\r\n          (itemObj) => itemObj.name === newObj.name\r\n        )!;\r\n        const color: string =\r\n          newObj.price === oldObj.price\r\n            ? \"\"\r\n            : newObj.price > oldObj.price\r\n            ? \"green\"\r\n            : \"red\";\r\n\r\n        initObj[newObj.name] = color;\r\n\r\n        return initObj;\r\n      },\r\n      {}\r\n    );\r\n\r\n    this.items = items;\r\n    setTimeout(() => {\r\n      this.diffObj = {};\r\n    }, 3000);\r\n  };\r\n\r\n  @action\r\n  fetchCoins = () => {\r\n    axios\r\n      .get(\r\n        \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD\"\r\n      )\r\n      .then(({ data }) => {\r\n        const coins: TCoin[] = data.Data.map((coin: any) => {\r\n          const obj: TCoin = {\r\n            name: coin.CoinInfo.Name,\r\n            fullNmae: coin.CoinInfo.FullName,\r\n            imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\r\n            price: coin.RAW.USD.PRICE.toFixed(3),\r\n            valume24hour: parseInt(coin.RAW.USD.VOLUME24HOUR),\r\n          };\r\n          return obj;\r\n        });\r\n        this.setItems(coins);\r\n      });\r\n    return [];\r\n  };\r\n\r\n  diffCurrencies(arr1: TCoin[], arr2: TCoin[]) {\r\n    return arr1.filter((obj, index) => {\r\n      if (obj.price !== arr2[index].price) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n}\r\n\r\nexport default CurrenciesStore;\r\n","import ConverterStore from \"./converterStore\";\r\nimport CurrenciesStore from \"./currenciesStore\";\r\n\r\nconst stores = {\r\n  converterStore: new ConverterStore(),\r\n  currenciesStore: new CurrenciesStore(),\r\n};\r\n\r\nexport default stores;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"mobx-react\";\n\nimport stores from './stores';\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider {...stores}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}